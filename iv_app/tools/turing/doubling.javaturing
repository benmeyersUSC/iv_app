INIT - S0 - SENTINEL - R - INIT0;
INIT0 - S0 - S0 - R - INIT1;
INIT1 - S0 - S1 - R - INIT2;
INIT2 - S0 - S0 - R - INIT3;
INIT3 - S0 - S2 - R - INIT4;
INIT4 - S0 - S0 - R - INIT5;
INIT5 - S0 - S1 - R - FIND_0;

FIND_0 - S0 - S0 - L - FIND_0;
FIND_0 - S1 - S1 - L - FIND_0_in;

FIND_0_in - S0 - S0 - L - FIND_0_in;
FIND_0_in - S1 - S1 - R - MARK_1;
FIND_0_in - S2 - S2 - L - FIND_0_in;

MARK_1 - S0 - S0 - R - MARK_1;
MARK_1 - S1 - S1 - R - FIND_X;
MARK_1 - S2 - S2 - R - MARK;

MARK - S0 - V1 - R - MARK_1;

FIND_X - S0 - S0 - L - FIND_X;
FIND_X - S1 - S1 - L - FIND_X_in;
FIND_X - S2 - S2 - L - FIND_X;

FIND_X_in - S0 - S0 - L - FIND_X_in;
FIND_X_in - S1 - S1 - R - DONE_X;
FIND_X_in - S2 - S2 - L - FIND_X_in;
FIND_X_in - V1 - V2 - R - MOVE_X;
FIND_X_in - V2 - V2 - L - FIND_X_in;

MOVE_X - S0 - S0 - R - MOVE_X;
MOVE_X - S1 - S1 - R - MOVE_X_a;
MOVE_X - S2 - S2 - R - MOVE_X;
MOVE_X - V1 - V1 - R - MOVE_X;
MOVE_X - V2 - V2 - R - MOVE_X;

MOVE_X_a - S0 - S0 - R - WRITE_1;

WRITE_1 - S0 - S2 - R - FIND_X;
WRITE_1 - S2 - S2 - R - WRITE_1_b;

WRITE_1_b - S0 - S0 - R - WRITE_1_c;

WRITE_1_c - S0 - S2 - R - FIND_X;
WRITE_1_c - S2 - S2 - R - WRITE_1_b;

DONE_X - S0 - S0 - R - IF_DONE_X;
DONE_X - S1 - S1 - R - DONE_X;
DONE_X - S2 - S2 - R - DONE_X;
DONE_X - V1 - V2 - R - MOVE_X;
DONE_X - V2 - V2 - R - DONE_X;

IF_DONE_X - S0 - S0 - L - FIND_Y;
IF_DONE_X - S1 - S1 - R - DONE_X;
IF_DONE_X - S2 - S2 - R - DONE_X;
IF_DONE_X - V2 - V2 - R - DONE_X;

FIND_Y - S0 - S0 - L - FIND_Y;
FIND_Y - S1 - S1 - L - FIND_Y_in;
FIND_Y - S2 - S2 - L - FIND_Y;

FIND_Y_in - S0 - S0 - L - FIND_Y_in;
FIND_Y_in - S1 - S1 - R - TO_END;
FIND_Y_in - S2 - S2 - L - FIND_Y_in;
FIND_Y_in - V2 - S0 - R - MOVE_Y;

MOVE_Y - S0 - S0 - R - IF_MOVE_Y;
MOVE_Y - S1 - S1 - R - MOVE_Y;
MOVE_Y - S2 - S2 - R - MOVE_Y;

IF_MOVE_Y - S0 - S2 - R - FIND_Y;
IF_MOVE_Y - S1 - S1 - R - MOVE_Y;
IF_MOVE_Y - S2 - S2 - R - MOVE_Y;

TO_END - S0 - S0 - R - IF_TO_END;
TO_END - S1 - S1 - R - TO_END;
TO_END - S2 - S2 - R - TO_END;

IF_TO_END - S0 - S1 - R - FIND_0;
IF_TO_END - S1 - S1 - R - TO_END;
IF_TO_END - S2 - S2 - R - TO_END;



#########

This program is even more complicated...
It counts the POWERS OF 2 on the tape in UNARY

on the tape we will see each unary power of 2 separated by "0" on either side

