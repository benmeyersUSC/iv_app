INIT - S0 - SENTINEL - R - INIT_2;
INIT_2 - S0 - S2 - R - INIT_3;
INIT_3 - S0 - S0 - R - INIT_4;
INIT_4 - S0 - S1 - R - INIT_5;
INIT_5 - S0 - S0 - R - INIT_6;
INIT_6 - S0 - S2 - R - INIT_7;
INIT_7 - S0 - S0 - R - NEW;

NEW - SENTINEL - SENTINEL - R - MARK_DIGITS;
NEW - S0 - S0 - L - NEW;
NEW - S1 - S1 - L - NEW;
NEW - S2 - S2 - L - NEW;

MARK_DIGITS - S1 - S1 - R - MARK_DIGITS_2;
MARK_DIGITS - S2 - S2 - R - MARK_DIGITS_2;
MARK_DIGITS - S0 - S0 - R - MARK_H;

MARK_H - S0 - V3 - R - MARK_H_2;
MARK_H_2 - S0 - S0 - R - MARK_H_3;
MARK_H_3 - S0 - V4 - N - FIND_X;

MARK_DIGITS_2 - S0 - V1 - R - MARK_DIGITS;

FIND_X - V1 - S0 - N - FIRST_R;
FIND_X - SENTINEL - SENTINEL - N - FIND_DIGITS;
FIND_X - S0 - S0 - L - FIND_X_H;
FIND_X - V3 - V3 - L - FIND_X_H;
FIND_X - V4 - V4 - L - FIND_X_H;

FIND_X_H - S0 - S0 - L - FIND_X;
FIND_X_H - S1 - S1 - L - FIND_X;
FIND_X_H - S2 - S2 - L - FIND_X;

FIRST_R - V4 - V4 - R - FIRST_R_H;
FIRST_R - S0 - S0 - R - FIRST_R;
FIRST_R - S1 - S1 - R - FIRST_R;
FIRST_R - S2 - S2 - R - FIRST_R;
FIRST_R - V3 - V3 - R - FIRST_R;

FIRST_R_H - S0 - S0 - R - LAST_R;

LAST_R - V4 - V4 - R - LAST_R_H;
LAST_R - S0 - V4 - R - LAST_R_H_2;

LAST_R_H - S0 - S0 - R - LAST_R;

LAST_R_H_2 - S0 - S0 - R - LAST_R_H_3;
LAST_R_H_3 - S0 - V4 - N - FIND_X;

FIND_DIGITS - SENTINEL - SENTINEL - R - FIND_DIGITS_H;
FIND_DIGITS - S0 - S0 - L - FIND_DIGITS;
FIND_DIGITS - S1 - S1 - L - FIND_DIGITS;
FIND_DIGITS - S2 - S2 - L - FIND_DIGITS;
FIND_DIGITS - V1 - V1 - L - FIND_DIGITS;
FIND_DIGITS - V2 - V2 - L - FIND_DIGITS;
FIND_DIGITS - V3 - V3 - L - FIND_DIGITS;
FIND_DIGITS - V4 - V4 - L - FIND_DIGITS;
FIND_DIGITS - V5 - V5 - L - FIND_DIGITS;
FIND_DIGITS - V8 - V8 - L - FIND_DIGITS;
FIND_DIGITS - V9 - V9 - L - FIND_DIGITS;

FIND_DIGITS_H - S2 - S2 - R - FIND_FST_DIG;

FIND_FST_DIG - V1 - V1 - L - FOUND_FST_DIG;
FIND_FST_DIG - V2 - V2 - L - FOUND_FST_DIG;
FIND_FST_DIG - V3 - V3 - L - FOUND_SND_DIG;
FIND_FST_DIG - S0 - S0 - R - FIND_FST_DIG_H;

FIND_FST_DIG_H - S0 - S0 - R - FIND_FST_DIG;
FIND_FST_DIG_H - S1 - S1 - R - FIND_FST_DIG;
FIND_FST_DIG_H - S2 - S2 - R - FIND_FST_DIG;

FOUND_FST_DIG - S1 - S1 - R - ADD_ZERO;
FOUND_FST_DIG - S2 - S2 - R - FFD_H;


FFD_H - V1 - V1 - R - FFD_H_2;
FFD_H - V2 - V2 - R - FFD_H_2;

FFD_H_2 - S0 - S0 - R - FIND_SND_DIG;
FFD_H_2 - S1 - S1 - R - FIND_SND_DIG;
FFD_H_2 - S2 - S2 - R - FIND_SND_DIG;

FIND_SND_DIG - V1 - V1 - L - FOUND_SND_DIG;
FIND_SND_DIG - V2 - V2 - L - FOUND_SND_DIG;
FIND_SND_DIG - S0 - S0 - R - FSD_H;

FSD_H - S0 - S0 - R - FIND_SND_DIG;
FSD_H - S1 - S1 - R - FIND_SND_DIG;
FSD_H - S2 - S2 - R - FIND_SND_DIG;

FOUND_SND_DIG - S1 - S1 - R - ADD_ZERO;
FOUND_SND_DIG - S2 - S2 - R - ADD_ONE;
FOUND_SND_DIG - S0 - S0 - R - ADD_ONE;

ADD_ZERO - V4 - V7 - N - ADD_FINISHED;
ADD_ZERO - V5 - V6 - N - ADD_FINISHED;
ADD_ZERO - S0 - S0 - R - AZ_H;
ADD_ZERO - V1 - V1 - R - AZ_H;
ADD_ZERO - V2 - V2 - R - AZ_H;
ADD_ZERO - V3 - V3 - R - AZ_H;
ADD_ZERO - V6 - V6 - R - AZ_H;
ADD_ZERO - V7 - V7 - R - AZ_H;
ADD_ZERO - V8 - V8 - R - AZ_H;
ADD_ZERO - V9 - V9 - R - AZ_H;

AZ_H - S0 - S0 - R - ADD_ZERO;
AZ_H - S1 - S1 - R - ADD_ZERO;
AZ_H - S2 - S2 - R - ADD_ZERO;

ADD_ONE - V4 - V6 - N - ADD_FINISHED;
ADD_ONE - V5 - V7 - R - ADD_ONE_U_H;
ADD_ONE - S0 - S0 - R - AO_H;
ADD_ONE - V1 - V1 - R - AO_H;
ADD_ONE - V2 - V2 - R - AO_H;
ADD_ONE - V3 - V3 - R - AO_H;
ADD_ONE - V6 - V6 - R - AO_H;
ADD_ONE - V7 - V7 - R - AO_H;
ADD_ONE - V8 - V8 - R - AO_H;
ADD_ONE - V9 - V9 - R - AO_H;

AO_H - S0 - S0 - R - ADD_ONE;
AO_H - S1 - S1 - R - ADD_ONE;
AO_H - S2 - S2 - R - ADD_ONE;

ADD_ONE_U_H - S0 - S0 - R - CARRY;

CARRY - V4 - V5 - N - ADD_FINISHED;
CARRY - S0 - V5 - N - NEW_DIGIT_IS_ZERO;
CARRY - V5 - V4 - R - C_H;

C_H - S0 - S0 - R - CARRY;

ADD_FINISHED - SENTINEL - SENTINEL - R - AF_H_SENT;
ADD_FINISHED - S0 - S0 - L - AF_H;
ADD_FINISHED - V1 - V1 - L - AF_H;
ADD_FINISHED - V2 - V2 - L - AF_H;
ADD_FINISHED - V3 - V3 - L - AF_H;
ADD_FINISHED - V4 - V4 - L - AF_H;
ADD_FINISHED - V5 - V5 - L - AF_H;
ADD_FINISHED - V6 - V6 - L - AF_H;
ADD_FINISHED - V7 - V7 - L - AF_H;
ADD_FINISHED - V8 - V8 - L - AF_H;
ADD_FINISHED - V9 - V9 - L - AF_H;

AF_H - S0 - S0 - L - ADD_FINISHED;
AF_H - S1 - S1 - L - ADD_FINISHED;
AF_H - S2 - S2 - L - ADD_FINISHED;


AF_H_SENT - S2 - S2 - R - ERASE_OLD_X;

ERASE_OLD_X - V1 - S0 - L - EOX;
ERASE_OLD_X - V3 - V2 - L - EOX;
ERASE_OLD_X - S0 - S0 - R - EOX_2;
ERASE_OLD_X - V2 - V2 - R - EOX_2;

EOX - S0 - S0 - L - PRINT_NEW_X;
EOX - S1 - S1 - L - PRINT_NEW_X;
EOX - S2 - S2 - L - PRINT_NEW_X;

EOX_2 - S0 - S0 - R - ERASE_OLD_X;
EOX_2 - S1 - S1 - R - ERASE_OLD_X;
EOX_2 - S2 - S2 - R - ERASE_OLD_X;

PRINT_NEW_X - SENTINEL - SENTINEL - R - PNX;
PRINT_NEW_X - V2 - V3 - N - FIND_DIGITS;
PRINT_NEW_X - S0 - V1 - N - FIND_DIGITS;

PNX - S2 - S2 - R - ERASE_OLD_Y;

ERASE_OLD_Y - V2 - S0 - L - EOY;
ERASE_OLD_Y - S0 - S0 - R - EOY_2;

EOY_2 - S0 - S0 - R - ERASE_OLD_Y;
EOY_2 - S1 - S1 - R - ERASE_OLD_Y;
EOY_2 - S2 - S2 - R - ERASE_OLD_Y;

EOY - S0 - S0 - L - PRINT_NEW_Y;
EOY - S1 - S1 - L - PRINT_NEW_Y;
EOY - S2 - S2 - L - PRINT_NEW_Y;

PRINT_NEW_Y - SENTINEL - SENTINEL - R - NEW_DIGIT_IS_ONE;
PRINT_NEW_Y - S0 - V2 - R - RESET_NEW_X;

RESET_NEW_X - S0 - S0 - R - RNX;
RESET_NEW_X - S1 - S1 - R - RNX_2;
RESET_NEW_X - S2 - S2 - R - RNX_2;

RNX - S0 - V1 - N - FLAG_RESULT_DIGS;

RNX_2 - S0 - S0 - R - RESET_NEW_X;

FLAG_RESULT_DIGS - V7 - V8 - R - FRD;
FLAG_RESULT_DIGS - V6 - V9 - R - FRD;
FLAG_RESULT_DIGS - V1 - V1 - R - FRD_2;
FLAG_RESULT_DIGS - V8 - V8 - R - FRD_2;
FLAG_RESULT_DIGS - V9 - V9 - R - FRD_2;


FRD - S0 - S0 - R - UNFLAG_RESULT_DIGS;

FRD_2 - S0 - S0 - R - FLAG_RESULT_DIGS;

UNFLAG_RESULT_DIGS - V7 - V4 - R - FRD;
UNFLAG_RESULT_DIGS - V6 - V5 - R - FRD;
UNFLAG_RESULT_DIGS - V4 - V4 - N - FIND_DIGITS;
UNFLAG_RESULT_DIGS - V5 - V5 - N - FIND_DIGITS;

NEW_DIGIT_IS_ZERO - SENTINEL - SENTINEL - R - PRINT_ZERO_DIGIT;
NEW_DIGIT_IS_ZERO - S0 - S0 - L - NEW_DIGIT_IS_ZERO;
NEW_DIGIT_IS_ZERO - S1 - S1 - L - NEW_DIGIT_IS_ZERO;
NEW_DIGIT_IS_ZERO - S2 - S2 - L - NEW_DIGIT_IS_ZERO;
NEW_DIGIT_IS_ZERO - V3 - V3 - L - NEW_DIGIT_IS_ZERO;
NEW_DIGIT_IS_ZERO - V5 - V5 - L - NEW_DIGIT_IS_ZERO;
NEW_DIGIT_IS_ZERO - V6 - V6 - L - NEW_DIGIT_IS_ZERO;
NEW_DIGIT_IS_ZERO - V7 - V7 - L - NEW_DIGIT_IS_ZERO;
NEW_DIGIT_IS_ZERO - V8 - V8 - L - NEW_DIGIT_IS_ZERO;
NEW_DIGIT_IS_ZERO - V9 - V9 - L - NEW_DIGIT_IS_ZERO;

PRINT_ZERO_DIGIT - S1 - S1 - R - PZD;
PRINT_ZERO_DIGIT - S2 - S2 - R - PZD;
PRINT_ZERO_DIGIT - S0 - S1 - R - PZD_2;

PZD - S0 - S0 - R - PRINT_ZERO_DIGIT;
PZD - V3 - S0 - R - PRINT_ZERO_DIGIT;

PZD_2 - S0 - S0 - R - PZD_3;

PZD_3 - S0 - S0 - R - CLEANUP;

NEW_DIGIT_IS_ONE - SENTINEL - SENTINEL - R - PRINT_ONE_DIGIT;
NEW_DIGIT_IS_ONE - S2 - S2 - L - NEW_DIGIT_IS_ONE;

PRINT_ONE_DIGIT - S1 - S1 - R - POD;
PRINT_ONE_DIGIT - S2 - S2 - R - POD;
PRINT_ONE_DIGIT - S0 - S2 - R - POD_2;

POD - S0 - S0 - R - PRINT_ONE_DIGIT;

POD_2 - S0 - S0 - R - POD_3;

POD_3 - S0 - S0 - R - CLEANUP;

CLEANUP - S0 - S0 - N - NEW;
CLEANUP - V5 - S0 - R - CLNP;
CLEANUP - V6 - S0 - R - CLNP;
CLEANUP - V7 - S0 - R - CLNP;
CLEANUP - V8 - S0 - R - CLNP;
CLEANUP - V9 - S0 - R - CLNP;

CLNP - S0 - S0 - R - CLEANUP;




#########

SQRT_2_TURING_PROGRAM

This program does some real math!

It is computing (indefinitely) the binary expansion of the Square Root of 2.

The way it works boils down to iteratively and recursively checking whether the next decimal should be
a '0' or a '1' by first assuming it's a '1', then squaring the current number, then if that product
is greater than '2', then we know the next digit should be a '0' and not a '1'.

The beauty is that it is in no way memorizing or hard-coding this answer. The process encoded into the configurations
iteratively produces digit after digit of the correct binary expansion on the Square Root of 2.

Take '01' in binary and add to it a decimal (ironic) point and the sequence that follows and square it.
The answer will be very near to '10', the binary representation of '2'.
